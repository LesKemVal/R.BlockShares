/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  ERC20,
  ERC20Interface,
} from "../../../../../@openzeppelin/contracts/token/ERC20/ERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523461032457610f0a8038038061001981610329565b9283398101906040818303126103245780516001600160401b038111610324578261004591830161034e565b60208201519092906001600160401b03811161032457610065920161034e565b81516001600160401b03811161022f57600354600181811c9116801561031a575b602082101461020f57601f81116102b5575b50602092601f82116001146102505792819293600092610245575b50508160011b916000199060031b1c1916176003555b80516001600160401b03811161022f57600454600181811c91168015610225575b602082101461020f57601f81116101aa575b50602091601f82116001146101465791819260009261013b575b50508160011b916000199060031b1c1916176004555b604051610b5090816103ba8239f35b015190503880610116565b601f198216926004600052806000209160005b85811061019257508360019510610179575b505050811b0160045561012c565b015160001960f88460031b161c1916905538808061016b565b91926020600181928685015181550194019201610159565b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f830160051c81019160208410610205575b601f0160051c01905b8181106101f957506100fc565b600081556001016101ec565b90915081906101e3565b634e487b7160e01b600052602260045260246000fd5b90607f16906100ea565b634e487b7160e01b600052604160045260246000fd5b0151905038806100b3565b601f198216936003600052806000209160005b86811061029d5750836001959610610284575b505050811b016003556100c9565b015160001960f88460031b161c19169055388080610276565b91926020600181928685015181550194019201610263565b60036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f830160051c81019160208410610310575b601f0160051c01905b8181106103045750610098565b600081556001016102f7565b90915081906102ee565b90607f1690610086565b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761022f57604052565b81601f82011215610324578051906001600160401b03821161022f5761037d601f8301601f1916602001610329565b92828452602083830101116103245760005b8281106103a457505060206000918301015290565b8060208092840101518282870101520161038f56fe608080604052600436101561001357600080fd5b60003560e01c90816306fdde03146105f857508063095ea7b3146105d257806318160ddd146105b457806323b872dd1461049b578063313ce5671461047f57806339509351146103f057806370a08231146103a957806395d89b4114610226578063a457c2d714610140578063a9059cbb1461010f5763dd62ed3e1461009857600080fd5b3461010a57604060031936011261010a576100b161071f565b73ffffffffffffffffffffffffffffffffffffffff6100ce610742565b9116600052600160205273ffffffffffffffffffffffffffffffffffffffff604060002091166000526020526020604060002054604051908152f35b600080fd5b3461010a57604060031936011261010a5761013561012b61071f565b60243590336108ed565b602060405160018152f35b3461010a57604060031936011261010a5761015961071f565b60243590336000526001602052604060002073ffffffffffffffffffffffffffffffffffffffff8216600052602052604060002054918083106101a25761013592039033610765565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b3461010a57600060031936011261010a57604051600090600454918260011c6001841693841561039f575b602082108514610372578394828552908160001461033057506001146102d3575b5003601f01601f191681019067ffffffffffffffff8211818310176102a4576102a0829182604052826106d5565b0390f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6004600090815291507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8183106103145750508101602001601f19610272565b60209193508060019154838588010152019101909183926102fe565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660208581019190915291151560051b84019091019150601f199050610272565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526022600452fd5b90607f1690610251565b3461010a57602060031936011261010a5773ffffffffffffffffffffffffffffffffffffffff6103d761071f565b1660005260006020526020604060002054604051908152f35b3461010a57604060031936011261010a5761040961071f565b336000526001602052604060002073ffffffffffffffffffffffffffffffffffffffff82166000526020526040600020546024358101809111610450576101359133610765565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b3461010a57600060031936011261010a57602060405160128152f35b3461010a57606060031936011261010a576104b461071f565b6104bc610742565b6044359073ffffffffffffffffffffffffffffffffffffffff83166000526001602052604060002073ffffffffffffffffffffffffffffffffffffffff3316600052602052604060002054927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff840361053a575b61013593506108ed565b828410610556576105518361013595033383610765565b610530565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b3461010a57600060031936011261010a576020600254604051908152f35b3461010a57604060031936011261010a576101356105ee61071f565b6024359033610765565b3461010a57600060031936011261010a57600090600354918260011c600184169384156106cb575b6020821085146103725783948285529081600014610330575060011461066e575003601f01601f191681019067ffffffffffffffff8211818310176102a4576102a0829182604052826106d5565b6003600090815291507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8183106106af5750508101602001601f19610272565b6020919350806001915483858801015201910190918392610699565b90607f1690610620565b9190916020815282519283602083015260005b848110610709575050601f19601f8460006040809697860101520116010190565b80602080928401015160408286010152016106e8565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361010a57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361010a57565b73ffffffffffffffffffffffffffffffffffffffff1690811561086a5773ffffffffffffffffffffffffffffffffffffffff169182156107e65760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff16908115610a965773ffffffffffffffffffffffffffffffffffffffff16918215610a125781600052600060205260406000205481811061098e57817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260209285600052600084520360406000205584600052600082526040600020818154019055604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152fdfea2646970667358221220c6efaf12894259348bb5d364bf129eb11b19170d5ae72bea664482e5a6f3278a64736f6c634300081c0033";

type ERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20__factory extends ContractFactory {
  constructor(...args: ERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name_: string,
    symbol_: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override deploy(
    name_: string,
    symbol_: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<
      ERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20__factory {
    return super.connect(runner) as ERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20Interface {
    return new Interface(_abi) as ERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): ERC20 {
    return new Contract(address, _abi, runner) as unknown as ERC20;
  }
}
