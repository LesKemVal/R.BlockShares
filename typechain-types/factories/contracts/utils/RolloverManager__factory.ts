/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  RolloverManager,
  RolloverManagerInterface,
} from "../../../contracts/utils/RolloverManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "investor",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "toToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "RolloverRecorded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "investor",
        type: "address",
      },
    ],
    name: "getRollovers",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "investor",
            type: "address",
          },
          {
            internalType: "address",
            name: "fromToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "toToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct RolloverManager.Rollover[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "investor",
        type: "address",
      },
      {
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "toToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "recordRollover",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "rolloversByInvestor",
    outputs: [
      {
        internalType: "address",
        name: "investor",
        type: "address",
      },
      {
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "toToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346015576107d1908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80637cead56014610505578063a958b2361461012d5763e472f43f1461003d57600080fd5b346101285760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101285761007461070d565b73ffffffffffffffffffffffffffffffffffffffff60243591166000526000602052604060002080548210156101285760a0916100b091610730565b5073ffffffffffffffffffffffffffffffffffffffff8154169073ffffffffffffffffffffffffffffffffffffffff6001820154169073ffffffffffffffffffffffffffffffffffffffff60028201541660046003830154920154926040519485526020850152604084015260608301526080820152f35b600080fd5b346101285760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101285761016461070d565b60243573ffffffffffffffffffffffffffffffffffffffff8116809103610128576044359173ffffffffffffffffffffffffffffffffffffffff83168093036101285773ffffffffffffffffffffffffffffffffffffffff1660643581156104a75782156104495783156103eb57801561038d576101e061077b565b82815260208101918483526040820191868352606081019082825260808101428152866000526000602052604060002080546801000000000000000081101561035e5761023291600182018155610730565b93909361032f5773ffffffffffffffffffffffffffffffffffffffff604096817f9c1cbade1e2aa15b2f58a0b809aabf84aa985b56a534ef4d906f5130f7550cbf9981806004985116167fffffffffffffffffffffffff00000000000000000000000000000000000000008954161788555116826001880191167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055511673ffffffffffffffffffffffffffffffffffffffff6002860191167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055516003840155519101558151908152426020820152a4005b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420616d6f756e740000000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f496e76616c696420746f546f6b656e00000000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c69642066726f6d546f6b656e0000000000000000000000000000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c696420696e766573746f72000000000000000000000000000000006044820152fd5b346101285760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101285773ffffffffffffffffffffffffffffffffffffffff61055161070d565b166000526000602052604060002080549067ffffffffffffffff821161035e57604051917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8260051b0116830183811067ffffffffffffffff82111761035e5760405280835260208301809260005260206000206000915b8383106106845784866040519182916020830190602084525180915260408301919060005b8181106105fe575050500390f35b91935091602060a06001926080875173ffffffffffffffffffffffffffffffffffffffff815116835273ffffffffffffffffffffffffffffffffffffffff85820151168584015273ffffffffffffffffffffffffffffffffffffffff604082015116604084015260608101516060840152015160808201520194019101918493926105f0565b6005602060019261069361077b565b73ffffffffffffffffffffffffffffffffffffffff865416815273ffffffffffffffffffffffffffffffffffffffff85870154168382015273ffffffffffffffffffffffffffffffffffffffff600287015416604082015260038601546060820152600486015460808201528152019201920191906105cb565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361012857565b805482101561074c576000526005602060002091020190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6040519060a0820182811067ffffffffffffffff82111761035e5760405256fea26469706673582212207dffed3d6a8905c11ee8c04842e906a52fe92a077ef2cc9b29f2ca25a332b65664736f6c634300081c0033";

type RolloverManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RolloverManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RolloverManager__factory extends ContractFactory {
  constructor(...args: RolloverManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      RolloverManager & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RolloverManager__factory {
    return super.connect(runner) as RolloverManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RolloverManagerInterface {
    return new Interface(_abi) as RolloverManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RolloverManager {
    return new Contract(address, _abi, runner) as unknown as RolloverManager;
  }
}
