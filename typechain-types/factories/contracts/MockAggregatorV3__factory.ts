/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MockAggregatorV3,
  MockAggregatorV3Interface,
} from "../../contracts/MockAggregatorV3";

const _abi = [
  {
    inputs: [],
    name: "answer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "answeredInRound",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "roundId",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "_answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "_startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "_answeredInRound",
        type: "uint80",
      },
    ],
    name: "setLatestRoundData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startedAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "updatedAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601557610419908161001b8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c908163313ce567146103b0575080634005e6811461030a57806354fd4d50146102ee5780637284e416146101fa5780637519ab50146101dc57806385bb7d69146101be5780638cd221c9146101945780639a6fc8f51461013a578063c22c249914610110578063f21f537d146100f25763feaf968c1461009857600080fd5b346100ed5760006003193601126100ed576001546000546002546003546004546040805169ffffffffffffffffffff96871681526020810195909552840192909252606083015291909116608082015260a090f35b600080fd5b346100ed5760006003193601126100ed576020600254604051908152f35b346100ed5760006003193601126100ed57602069ffffffffffffffffffff60045416604051908152f35b346100ed5760206003193601126100ed576101536103ca565b6000546002546003546004546040805169ffffffffffffffffffff96871681526020810195909552840192909252606083015291909116608082015260a090f35b346100ed5760006003193601126100ed57602069ffffffffffffffffffff60015416604051908152f35b346100ed5760006003193601126100ed576020600054604051908152f35b346100ed5760006003193601126100ed576020600354604051908152f35b346100ed5760006003193601126100ed576040516040810181811067ffffffffffffffff8211176102bf57604052600f81527f4d6f636b2041676772656761746f720000000000000000000000000000000000602082015260405190602082528181519182602083015260005b8381106102a75750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604080968601015201168101030190f35b60208282018101516040878401015285935001610267565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b346100ed5760006003193601126100ed57602060405160018152f35b346100ed5760a06003193601126100ed576103236103ca565b6084359069ffffffffffffffffffff82168092036100ed5769ffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000060015416176001556024356000556044356002556064356003557fffffffffffffffffffffffffffffffffffffffffffff000000000000000000006004541617600455600080f35b346100ed5760006003193601126100ed5780600860209252f35b6004359069ffffffffffffffffffff821682036100ed5756fea26469706673582212205902c170348d7792cf68ad6131251a720b2c19352767766e8eeb0126d9eaaa0a64736f6c634300081c0033";

type MockAggregatorV3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAggregatorV3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAggregatorV3__factory extends ContractFactory {
  constructor(...args: MockAggregatorV3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockAggregatorV3 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockAggregatorV3__factory {
    return super.connect(runner) as MockAggregatorV3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAggregatorV3Interface {
    return new Interface(_abi) as MockAggregatorV3Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockAggregatorV3 {
    return new Contract(address, _abi, runner) as unknown as MockAggregatorV3;
  }
}
