/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace RolloverManager {
  export type RolloverStruct = {
    investor: AddressLike;
    fromToken: AddressLike;
    toToken: AddressLike;
    amount: BigNumberish;
    timestamp: BigNumberish;
  };

  export type RolloverStructOutput = [
    investor: string,
    fromToken: string,
    toToken: string,
    amount: bigint,
    timestamp: bigint
  ] & {
    investor: string;
    fromToken: string;
    toToken: string;
    amount: bigint;
    timestamp: bigint;
  };
}

export interface RolloverManagerInterface extends Interface {
  getFunction(
    nameOrSignature: "getRollovers" | "recordRollover" | "rolloversByInvestor"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RolloverRecorded"): EventFragment;

  encodeFunctionData(
    functionFragment: "getRollovers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordRollover",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rolloversByInvestor",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getRollovers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordRollover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rolloversByInvestor",
    data: BytesLike
  ): Result;
}

export namespace RolloverRecordedEvent {
  export type InputTuple = [
    investor: AddressLike,
    fromToken: AddressLike,
    toToken: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    investor: string,
    fromToken: string,
    toToken: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    investor: string;
    fromToken: string;
    toToken: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RolloverManager extends BaseContract {
  connect(runner?: ContractRunner | null): RolloverManager;
  waitForDeployment(): Promise<this>;

  interface: RolloverManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getRollovers: TypedContractMethod<
    [investor: AddressLike],
    [RolloverManager.RolloverStructOutput[]],
    "view"
  >;

  recordRollover: TypedContractMethod<
    [
      investor: AddressLike,
      fromToken: AddressLike,
      toToken: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  rolloversByInvestor: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        investor: string;
        fromToken: string;
        toToken: string;
        amount: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getRollovers"
  ): TypedContractMethod<
    [investor: AddressLike],
    [RolloverManager.RolloverStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "recordRollover"
  ): TypedContractMethod<
    [
      investor: AddressLike,
      fromToken: AddressLike,
      toToken: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rolloversByInvestor"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        investor: string;
        fromToken: string;
        toToken: string;
        amount: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "RolloverRecorded"
  ): TypedContractEvent<
    RolloverRecordedEvent.InputTuple,
    RolloverRecordedEvent.OutputTuple,
    RolloverRecordedEvent.OutputObject
  >;

  filters: {
    "RolloverRecorded(address,address,address,uint256,uint256)": TypedContractEvent<
      RolloverRecordedEvent.InputTuple,
      RolloverRecordedEvent.OutputTuple,
      RolloverRecordedEvent.OutputObject
    >;
    RolloverRecorded: TypedContractEvent<
      RolloverRecordedEvent.InputTuple,
      RolloverRecordedEvent.OutputTuple,
      RolloverRecordedEvent.OutputObject
    >;
  };
}
