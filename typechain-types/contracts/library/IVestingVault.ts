/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IVestingVault {
  export type VestingStruct = {
    beneficiary: AddressLike;
    releaseTime: BigNumberish;
    tokenAmount: BigNumberish;
  };

  export type VestingStructOutput = [
    beneficiary: string,
    releaseTime: bigint,
    tokenAmount: bigint
  ] & { beneficiary: string; releaseTime: bigint; tokenAmount: bigint };
}

export interface IVestingVaultInterface extends Interface {
  getFunction(
    nameOrSignature: "addBeneficiary" | "release" | "token" | "vestingFor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "VestingLockedIn" | "VestingReleased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addBeneficiary",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "release", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vestingFor",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vestingFor", data: BytesLike): Result;
}

export namespace VestingLockedInEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    releaseTime: BigNumberish,
    tokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    releaseTime: bigint,
    tokenAmount: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    releaseTime: bigint;
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingReleasedEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    releaseTime: BigNumberish,
    tokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    releaseTime: bigint,
    tokenAmount: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    releaseTime: bigint;
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IVestingVault extends BaseContract {
  connect(runner?: ContractRunner | null): IVestingVault;
  waitForDeployment(): Promise<this>;

  interface: IVestingVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addBeneficiary: TypedContractMethod<
    [
      beneficiary_: AddressLike,
      releaseTime_: BigNumberish,
      tokenAmount_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  release: TypedContractMethod<[], [void], "nonpayable">;

  token: TypedContractMethod<[], [string], "view">;

  vestingFor: TypedContractMethod<
    [beneficary_: AddressLike],
    [IVestingVault.VestingStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addBeneficiary"
  ): TypedContractMethod<
    [
      beneficiary_: AddressLike,
      releaseTime_: BigNumberish,
      tokenAmount_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "release"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vestingFor"
  ): TypedContractMethod<
    [beneficary_: AddressLike],
    [IVestingVault.VestingStructOutput[]],
    "view"
  >;

  getEvent(
    key: "VestingLockedIn"
  ): TypedContractEvent<
    VestingLockedInEvent.InputTuple,
    VestingLockedInEvent.OutputTuple,
    VestingLockedInEvent.OutputObject
  >;
  getEvent(
    key: "VestingReleased"
  ): TypedContractEvent<
    VestingReleasedEvent.InputTuple,
    VestingReleasedEvent.OutputTuple,
    VestingReleasedEvent.OutputObject
  >;

  filters: {
    "VestingLockedIn(address,uint256,uint256)": TypedContractEvent<
      VestingLockedInEvent.InputTuple,
      VestingLockedInEvent.OutputTuple,
      VestingLockedInEvent.OutputObject
    >;
    VestingLockedIn: TypedContractEvent<
      VestingLockedInEvent.InputTuple,
      VestingLockedInEvent.OutputTuple,
      VestingLockedInEvent.OutputObject
    >;

    "VestingReleased(address,uint256,uint256)": TypedContractEvent<
      VestingReleasedEvent.InputTuple,
      VestingReleasedEvent.OutputTuple,
      VestingReleasedEvent.OutputObject
    >;
    VestingReleased: TypedContractEvent<
      VestingReleasedEvent.InputTuple,
      VestingReleasedEvent.OutputTuple,
      VestingReleasedEvent.OutputObject
    >;
  };
}
