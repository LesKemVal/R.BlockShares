/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ICrowdSaleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyTokens"
      | "externalBuyTokens"
      | "fundsRaised"
      | "token"
      | "tokensAvailable"
      | "wallet"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TokensPurchased"): EventFragment;

  encodeFunctionData(
    functionFragment: "buyTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "externalBuyTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundsRaised",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensAvailable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wallet", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "externalBuyTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundsRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wallet", data: BytesLike): Result;
}

export namespace TokensPurchasedEvent {
  export type InputTuple = [
    purchaser: AddressLike,
    beneficiary: AddressLike,
    value: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    purchaser: string,
    beneficiary: string,
    value: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    purchaser: string;
    beneficiary: string;
    value: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICrowdSale extends BaseContract {
  connect(runner?: ContractRunner | null): ICrowdSale;
  waitForDeployment(): Promise<this>;

  interface: ICrowdSaleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyTokens: TypedContractMethod<[beneficiary: AddressLike], [void], "payable">;

  externalBuyTokens: TypedContractMethod<
    [beneficiary: AddressLike, tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  fundsRaised: TypedContractMethod<[], [bigint], "view">;

  token: TypedContractMethod<[], [string], "view">;

  tokensAvailable: TypedContractMethod<[], [bigint], "view">;

  wallet: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyTokens"
  ): TypedContractMethod<[beneficiary: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "externalBuyTokens"
  ): TypedContractMethod<
    [beneficiary: AddressLike, tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundsRaised"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokensAvailable"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "wallet"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "TokensPurchased"
  ): TypedContractEvent<
    TokensPurchasedEvent.InputTuple,
    TokensPurchasedEvent.OutputTuple,
    TokensPurchasedEvent.OutputObject
  >;

  filters: {
    "TokensPurchased(address,address,uint256,uint256)": TypedContractEvent<
      TokensPurchasedEvent.InputTuple,
      TokensPurchasedEvent.OutputTuple,
      TokensPurchasedEvent.OutputObject
    >;
    TokensPurchased: TypedContractEvent<
      TokensPurchasedEvent.InputTuple,
      TokensPurchasedEvent.OutputTuple,
      TokensPurchasedEvent.OutputObject
    >;
  };
}
